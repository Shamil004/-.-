# -*- coding: utf-8 -*-
"""Нейронная сеть для распознавания цифр.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16Fcra9RLSgR0JG6GOgueHnVihxRXjTOI
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import matplotlib.pyplot as plt
from tensorflow.keras.datasets import mnist
from tensorflow import keras
from tensorflow.keras.layers import Dense, Flatten
# %matplotlib inline

"""**Загрузка** обучающей и тестовой выборок"""

(x_train, y_train), (x_test, y_test) = mnist.load_data()

"""Нормализация входных данных"""

x_train = x_train / 255
x_test = x_test / 255

"""Преобразование выходных значений в векторы по категориям"""

y_train_cat = keras.utils.to_categorical(y_train, 10)
y_test_cat = keras.utils.to_categorical(y_test, 10)

"""Отображение первых 25 изображений из обучающей выборки"""

plt.figure(figsize=(10,5))
for i in range(100):
  plt.subplot(10, 10, i+1)
  plt.xticks([])
  plt.yticks([y_train[i]])
  plt.imshow(x_train[i], cmap=plt.cm.binary)

plt.show()

"""Фирование модели НС  вывод ее структуры в кансоль"""

model = keras.Sequential([
    Flatten(input_shape=(28, 28, 1)),
    Dense(128, activation='relu'),
    #Dense(16, activation='relu'),
    Dense(10, activation='softmax')
])

print(model.summary())

"""Компиляция НС с оптимизацией по Adam и критерием - категориальная кросс-энтропия"""

model.compile(optimizer='adam',
              loss='categorical_crossentropy',
              metrics=['accuracy'])

"""Запуск процесса обучения: 80% - обучающая выборка, 20 % - выборка валидации"""

model.fit(x_train, y_train_cat, batch_size=32, epochs=5, validation_split=0.2)

model.evaluate(x_test, y_test_cat)

"""Проверка распознавания цифр"""

n = 13
x = np.expand_dims(x_test[n], axis=0)
res = model.predict(x)
print( res )
print(f'Распознанная цифра: {np.argmax(res)}')

plt.imshow(x_test[n], cmap=plt.cm.binary)
plt.show()

"""Распознавание всей тестовой выборки"""

pred = model.predict(x_test) #Генерирует выходные прогнозы для входных выборок
pred = np.argmax(pred, axis=1) #Возвращает индексы максимальных значений по оси

print(pred.shape)

print(pred[:20])
print(y_test[:20])

"""Выделение неверных вариантов """

mask = pred == y_test
print(mask[:10])

#>>> import numpy as np
#>>> a = np.arange(8)
#>>> mask = np.array([False, False, False, False, True, True, True, False], dtype=np.bool)
#>>> a[mask]
#array([4, 5, 6])

x_false = x_test[~mask]
p_false = pred[~mask]
mc = np.where(p_false == FalseFalFalse

print(x_false.shape)
print(mc)

"""Вывод первых 5 неверных результатов"""

for i in mc[0]:
  print("Значение сети: ",str(p_false[i]))
  plt.imshow(x_false[i], cmap=plt.cm.binary)
  plt.xticks([])
  plt.yticks([y_test[i]])
  plt.show()